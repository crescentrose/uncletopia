- name: Check if any mod files need to be downloaded
  stat:
    path: "serverfiles/{{ item | basename }}"
  loop: "{{ mods }}"
  register: existing_mods

# additional check in case we crashed before the untar step somehow
- name: Check if Metamod VDF exists
  stat:
    path: "serverfiles/tf/addons/metamod.vdf"
  register: metamod_vdf

- name: Download mod files
  get_url:
    url: "{{ item }}"
    dest: "serverfiles/"
  register: downloaded_mods
  when: not existing_mods.results[i].stat.exists
  loop: "{{ mods }}"
  loop_control:
    index_var: i

- name: Untar mod files
  command:
    chdir: serverfiles/tf
    cmd: "tar -xvf ../{{ item.item | basename }}"
    warn: false # unarchive doesn't work with these archives for some reason
  # This will skip the untar step if the archives already exist on the server
  # and they were unchanged. So, when you update, it _should_ detect that new
  # archives have been created and untar them.
  when: "'skipped' not in item or not metamod_vdf.stat.exists"
  loop: "{{ downloaded_mods.results }}"

# Configure TF2
- name: tf/cfg/sourcemod/
  synchronize:
    src: tf/cfg/sourcemod
    dest: serverfiles/tf/cfg/
    owner: false
    group: false
    recursive: true
    delete: true

- name: cfg/mapconfig/
  synchronize:
    src: tf/cfg/mapconfig
    dest: serverfiles/tf/cfg/
    owner: false
    group: false
    recursive: true
    delete: true

- name: tf/custom/
  synchronize:
    src: tf/custom/
    dest: serverfiles/tf/custom/
    owner: false
    group: false
    recursive: true
    delete: true

- name: admins_simple.ini
  template:
    src: admins_simple.ini.j2
    dest: ~/serverfiles/tf/addons/sourcemod/configs/admins_simple.ini

- name: mapcycle.txt
  template:
    src: mapcycle.txt.j2
    dest: ~/serverfiles/tf/cfg/mapcycle.txt

- name: motd.txt
  template:
    src: motd.txt.j2
    dest: ~/serverfiles/tf/cfg/motd.txt

- name: tf/cfg/mapcycle_halloween.txt
  copy:
    src: tf/cfg/mapcycle_halloween.txt
    dest: ~/serverfiles/tf/cfg/mapcycle_halloween.txt
    mode: 0660

- name: tf/cfg/pure_server_whitelist.txt
  copy:
    src: tf/cfg/pure_server_whitelist.txt
    dest: ~/serverfiles/tf/cfg/pure_server_whitelist.txt
    mode: 0660

- name: tf/cfg/cronjobs.txt
  copy:
    src: tf/cfg/cronjobs.txt
    dest: ~/serverfiles/tf/cfg/cronjobs.txt
    mode: 0660

- name: tf/cfg/tf2server.cfg
  template:
    src: tf2server.cfg.j2
    dest: ~/serverfiles/tf/cfg/tf2server.cfg

- name: config-lgsm/tf2server/tf2server.cfg
  template:
    src: lgsm-tf2server.cfg.j2
    dest: lgsm/config-lgsm/tf2server/tf2server.cfg

- name: tf/addons/sourcemod/configs/gbans.cfg
  when: gbans
  template:
    src: gbans.cfg.j2
    dest: ~/serverfiles/tf/addons/sourcemod/configs/gbans.cfg

- name: 50unattended-upgrades
  become: yes
  copy:
    src: 50unattended-upgrades
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    mode: '644'

- name: start tf2server
  command:
    cmd: sudo systemctl start tf2server
    creates: lgsm/lock/tf2server.lock

- name: crontab monitor
  become: yes
  cron:
    name: "tf2server monitor"
    minute: "*/1"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    user: tf2server
    job: "/home/tf2server/tf2server monitor > /dev/null 2>&1"

- name: crontab update
  become: yes
  cron:
    name: "tf2server update"
    minute: "*/5"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    user: tf2server
    job: "/home/tf2server/tf2server update > /dev/null 2>&1"

- name: crontab force-update
  become: yes
  cron:
    name: "tf2server restart"
    minute: "0"
    hour: "5"
    day: "*"
    month: "*"
    weekday: "*"
    user: tf2server
    job: "/home/tf2server/tf2server force-update > /dev/null 2>&1"

- name: crontab update-lgsm
  become: yes
  cron:
    name: "tf2server update-functions"
    minute: "0"
    hour: "0"
    day: "*"
    month: "*"
    weekday: "0"
    user: tf2server
    job: "/home/tf2server/tf2server update-lgsm > /dev/null 2>&1"
